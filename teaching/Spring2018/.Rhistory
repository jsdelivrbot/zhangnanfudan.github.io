################
pdf(file="jj.pdf", width=7.5,height=3.25)
dev.off()
#################
# Mar 8, 2018
################
# Example 1.1 Johnson & Johnson Quarterly Earnings
par(mar=c(3,3,1,1), mgp=c(1.6,.6,0))
plot(jj, ylab="Quarterly Earnings per Share", type='n')
grid(lty=1)
lines(jj, type="o")
library('astsa')
library('astsa')
source('grid.r')
###################
# Mar 2, 2017
###################
################
# Johnson & Johnson Quarterly Earnings
par(mar=c(3,3,1,1), mgp=c(1.6,.6,0))
###################
# Mar 8, 2018
###################
################
# Johnson & Johnson Quarterly Earnings
par(mar=c(3,3,1,1), mgp=c(1.6,.6,0))
plot(jj, ylab="Quarterly Earnings per Share",   type='n')
grid(lty=1)
lines(jj, type="o")
dev.off()
###########
# Global Warming
par(mar=c(3,3,1,1), mgp=c(1.6,.6,0))
plot(globtemp, ylab="Global Temperature Deviations",    type='n')
grid(lty=1); lines(globtemp, type='o')
plot(gtemp, type='n')
grid(lty=1); lines(gtemp, type='o')
data(astsa)
summary(astsa)
###########
# Speech
par(mar=c(3,3,1,1), mgp=c(1.6,.6,0))
plot(speech,   type='n', ylab='speech')
grid(lty=1);   lines(speech);
###########
# New York Stock Exchange
par(mar=c(3,3,1,1), mgp=c(1.6,.6,0))
plot(nyse,   type='n', ylab='NYSE Returns')
grid(lty=1);   lines(nyse);
tsplot(jj, type="o", ylab="Quarterly Earnings per Share")
tsplot(globtemp, type="o", ylab="Global Temperature Deviations")
?tsplot
###########
# Speech
tsplot(speech)
###########
## djia is in astsa version 1.5+ - this is where it came from
# library(TTR)                            # install it first
# djia  = getYahooData("^DJI", start=20060420, end=20160420, freq="daily")
library(xts)                              # if don't use TTR
install.packages("xts")
install.packages("TTR")
library(astsa)
###################
# Mar 8, 2018
###################
################
# Johnson & Johnson Quarterly Earnings
tsplot(jj, type="o", ylab="Quarterly Earnings per Share")
dev.off()
###########
# Global Warming
tsplot(globtemp, type="o", ylab="Global Temperature Deviations")
dev.off()
###########
# Speech
tsplot(speech)
dev.off()
###########
# DowJonesIndustrialAverage
library(TTR)
djia = getYahooData("^DJI", start=20060420, end=20160420, freq="daily")
library(xts)                              # if don't use TTR
djiar = diff(log(djia$Close))[-1]         # approximate returns
plot(djiar, main="DJIA Returns", type="n")
lines(djiar)
?getYahooData
head(djia)
?getSymbols
install.packages("quantmod")
###########
# Dow Jones Industrial Average
library(quantmod)
?getSymbols
djia = getSymbols("^DJI", start=20060420, end=20160420, freq="daily")
head(djia)
###########
# Dow Jones Industrial Average
library(quantmod)
djia = getSymbols("^DJI", from="2006-04-20", to="2016-04-20", periodicity="daily")
library(xts)                              # if don't use TTR
djiar = diff(log(djia$Close))[-1]         # approximate returns
head(djia)
djia
djia$Close
getSymbols('MSFT',src='yahoo')
DJI
djia = getSymbols("DJI", from="2006-04-20", to="2016-04-20", periodicity="daily")
###########
# Dow Jones Industrial Average
library(quantmod)
getSymbols("^DJI", from="2006-04-20", to="2016-04-20", periodicity="daily")
djia = DJI
head(djia)
library(xts)                              # if don't use TTR
djiar = diff(log(djia$Close))[-1]         # approximate returns
djiar = diff(log(djia$DJI.Close))[-1]         # approximate returns
plot(djiar, main="DJIA Returns", type="n")
lines(djiar)
###########
# New York Stock Exchange
par(mar=c(3,3,1,1), mgp=c(1.6,.6,0))
plot(nyse,   type='n', ylab='NYSE Returns')
grid(lty=1);   lines(nyse);
tsplot(nyse,   type='o', ylab='NYSE Returns')
tsplot(nyse, ylab='NYSE Returns')
#########
# SOI and Fish
par(mfrow = c(2,1))  # set up the graphics
tsplot(soi, ylab="", main="Southern Oscillation Index")
tsplot(rec, ylab="", main="Recruitment")
#########
# fMRI
par(mfrow=c(2,1), mar=c(3,2,1,0)+.5, mgp=c(1.6,.6,0))
ts.plot(fmri1[,2:5], col=1:4, ylab="BOLD", xlab="", main="Cortex")
ts.plot(fmri1[,6:9], col=1:4, ylab="BOLD", xlab="", main="Thalamus & Cerebellum")
mtext("Time (1 pt = 2 sec)", side=1, line=2)
#####################
# Earthquakes and Explosions
par(mfrow=c(2,1))
tsplot(EQ5, main="Earthquake")
tsplot(EXP6, main="Explosion")
####################
# Example 1.9 white noise and moving average
w = rnorm(500,0,1)  # 500 N(0,1) variates
v = filter(w, sides=2, rep(1/3,3))  # moving average
par(mfrow=c(2,1))
tsplot(w, main="white noise")
tsplot(v, ylim=c(-3,3), main="moving average")
# now try this (not in text):
dev.new()  # open a new graphic device
ts.plot(w, v, lty=2:1, col=1:2, lwd=1:2)
?tsplot
?filter
ts.plot(w, v, lty=2:1, col=1:2, lwd=1:2)
####################
# Example 1.10 Autoregression
w = rnorm(550,0,1)  # 50 extra to avoid startup problems
x = filter(w, filter=c(1,-.9), method="recursive")[-(1:50)]
tsplot(x, main="autoregression")
# now try this (not in text):
# dev.new()  # open a new graphic device
# ts.plot(w, v, lty=2:1, col=1:2, lwd=1:2)
dev.off()
####################
# Example 1.10 Autoregression
w = rnorm(550,0,1)  # 50 extra to avoid startup problems
x = filter(w, filter=c(1,-.9), method="recursive")[-(1:50)]
tsplot(x, main="autoregression")
head(w)
head(x)
dim(w)
length(w)
length(x)
nan=filter(w, filter=c(1,-.9), method="recursive")
length(nan)
head(w)
head(nan)
w[1]+w[2]
#################
# Example 1.11 RW with Drift
set.seed(154) # so you can reproduce the results
w = rnorm(200); x = cumsum(w) # two commands in one line
wd = w +.2;    xd = cumsum(wd)
tsplot(xd, ylim=c(-5,55), main="random walk", ylab='')
lines(x, col=4)
abline(h=0, col=4, lty=2)
abline(a=0, b=.2, lty=2)
####################
# Example 1.12 Signal in Noise
cs = 2*cos(2*pi*(1:500)/50 + .6*pi)
w = rnorm(500,0,1)
par(mfrow=c(3,1), mar=c(3,2,2,1), cex.main=1.5)
tsplot(cs, ylab="", main = expression(x[t]==2*cos(2*pi*t/50+.6*pi)))
tsplot(cs + w, ylab="", main = expression(x[t]==2*cos(2*pi*t/50+.6*pi)+N(0,1)))
tsplot(cs + 5*w, ylab="", main = expression(x[t]==2*cos(2*pi*t/50+.6*pi)+N(0,25)))
library(astsa)
jj
?tsplot
###################
# Mar 8, 2018
###################
################
# Johnson & Johnson Quarterly Earnings
tsplot(jj, type="o", ylab="Quarterly Earnings per Share")
###########
# Global Warming
tsplot(globtemp, type="o", ylab="Global Temperature Deviations")
###########
# Speech
tsplot(speech)
###########
# Dow Jones Industrial Average
library(quantmod)
getSymbols("^DJI", from="2006-04-20", to="2016-04-20", periodicity="daily")
djia = DJI
head(DJI)
library(xts)                              # if don't use TTR
djiar = diff(log(djia$DJI.Close))[-1]         # approximate returns
plot(djiar, main="DJIA Returns", type="n")
lines(djiar)
#########
# SOI and Fish
par(mfrow = c(2,1))  # set up the graphics
tsplot(soi, ylab="", main="Southern Oscillation Index")
tsplot(rec, ylab="", main="Recruitment")
#########
# fMRI
par(mfrow=c(2,1), mar=c(3,2,1,0)+.5, mgp=c(1.6,.6,0))
ts.plot(fmri1[,2:5], col=1:4, ylab="BOLD", xlab="", main="Cortex")
ts.plot(fmri1[,6:9], col=1:4, ylab="BOLD", xlab="", main="Thalamus & Cerebellum")
mtext("Time (1 pt = 2 sec)", side=1, line=2)
#####################
# Earthquakes and Explosions
par(mfrow=c(2,1))
tsplot(EQ5, main="Earthquake")
tsplot(EXP6, main="Explosion")
####################
# Example 1.9 white noise and moving average
w = rnorm(500,0,1)  # 500 N(0,1) variates
v = filter(w, sides=2, rep(1/3,3))  # moving average
par(mfrow=c(2,1))
tsplot(w, main="white noise")
tsplot(v, ylim=c(-3,3), main="moving average")
x = filter(w, filter=c(1,-.9), method="recursive")[-(1:50)]
tsplot(x, main="autoregression")
dev.off()
####################
# Example 1.10 Autoregression
w = rnorm(550,0,1)  # 50 extra to avoid startup problems
x = filter(w, filter=c(1,-.9), method="recursive")[-(1:50)]
tsplot(x, main="autoregression")
#################
# Example 1.11 RW with Drift
set.seed(154) # so you can reproduce the results
w = rnorm(200); x = cumsum(w) # two commands in one line
wd = w +.2;    xd = cumsum(wd)
tsplot(xd, ylim=c(-5,55), main="random walk", ylab='')
lines(x, col=4)
abline(h=0, col=4, lty=2)
abline(a=0, b=.2, lty=2)
####################
# Example 1.12 Signal in Noise
cs = 2*cos(2*pi*(1:500)/50 + .6*pi)
w = rnorm(500,0,1)
par(mfrow=c(3,1), mar=c(3,2,2,1), cex.main=1.5)
tsplot(cs, ylab="", main = expression(x[t]==2*cos(2*pi*t/50+.6*pi)))
tsplot(cs + w, ylab="", main = expression(x[t]==2*cos(2*pi*t/50+.6*pi)+N(0,1)))
tsplot(cs + 5*w, ylab="", main = expression(x[t]==2*cos(2*pi*t/50+.6*pi)+N(0,25)))
install.packages("tidyverse")
library(tidyverse)
install.packages(c("nycflights13", "gapminder", "Lahman"))
install.packages("Lahman")
install.packages("Lahman")
####################
# Example 1.12 Signal in Noise
cs = 2*cos(2*pi*(1:500)/50 + .6*pi)
w = rnorm(500,0,1)
par(mfrow=c(3,1), mar=c(3,2,2,1), cex.main=1.5)
tsplot(cs, ylab="", main = expression(x[t]==2*cos(2*pi*t/50+.6*pi)))
tsplot(cs + w, ylab="", main = expression(x[t]==2*cos(2*pi*t/50+.6*pi)+N(0,1)))
library(astsa)
####################
# Example 1.12 Signal in Noise
cs = 2*cos(2*pi*(1:500)/50 + .6*pi)
w = rnorm(500,0,1)
par(mfrow=c(3,1), mar=c(3,2,2,1), cex.main=1.5)
tsplot(cs, ylab="", main = expression(x[t]==2*cos(2*pi*t/50+.6*pi)))
tsplot(cs + w, ylab="", main = expression(x[t]==2*cos(2*pi*t/50+.6*pi)+N(0,1)))
tsplot(cs + 5*w, ylab="", main = expression(x[t]==2*cos(2*pi*t/50+.6*pi)+N(0,25)))
dev.off()
set.seed(2)
x = rnorm(100)
y = lag(x, -5) + rnorm(100)
ccf(y, x, ylab='CCovF', type='covariance')
abline(v=0, lty=2)
text(11, .9, 'x leads')
text(-9, .9, 'y leads')
###################
# Mar 15, 2018
###################
# Autocovariance of three-point MA
ACF = c(0,0,0,1/3,2/3,1,2/3,1/3,0,0,0)/3
LAG = c(-5,-4,-3,-2,-1,0,1,2,3,4,5)
par(mar=c(2,2,0,0)+.5, mgp=c(1.6,.6,0))
plot(LAG, ACF, type='h', lwd=3,  panel.first=grid(lty=1))
abline(h=0)
###################
# Mar 15, 2018
###################
####################
# Example 1.24 Prediction with cross-correlation
set.seed(2)
x = rnorm(100)
y = lag(x, -5) + rnorm(100)
ccf(y, x, ylab='CCovF', type='covariance')
abline(v=0, lty=2)
text(11, .9, 'x leads')
text(-9, .9, 'y leads')
########
# Extra example on ACF and CCF
set.seed(1492)
num=120; t=1:num
X = ts(2*cos(2*pi*t/12) + rnorm(num), freq=12)
Y = ts(2*cos(2*pi*(t+5)/12) + rnorm(num), freq=12)
Yw = resid( lm(Y~ cos(2*pi*t/12) + sin(2*pi*t/12), na.action=NULL) )
par(mfrow=c(3,2), mgp=c(1.6,.6,0), mar=c(3,3,1,1) )
plot(X, type='n'); grid(lty=1, col=gray(.9)); lines(X)
plot(Y, type='n'); grid(lty=1, col=gray(.9)); lines(Y)
acf(X,48, ylab='ACF(X)', panel.first=grid(lty=1, col=gray(.9)))
acf(Y,48, ylab='ACF(Y)', panel.first=grid(lty=1, col=gray(.9)))
ccf(X,Y,24, ylab='CCF(X,Y)', panel.first=grid(lty=1, col=gray(.9)))
ccf(X,Yw,24, ylab='CCF(X,Yw)', ylim=c(-.6,.6), panel.first=grid(lty=1, col=gray(.9)))
####################
# Example 1.25
(r = round(acf(soi, 6, plot=FALSE)$acf[-1], 3)) # first 6 sample acf values
par(mfrow=c(1,2))
plot(lag(soi,-1), soi); legend('topleft', legend=r[1])
plot(lag(soi,-6), soi); legend('topleft', legend=r[6])
####################
# Example 1.25
r = round(acf(soi, 6, plot=FALSE)$acf[-1], 3) # first 6 sample acf values
?acf
acf(soi, 6)
####################
# Example 1.25
r = round(acf(soi, 6, plot=FALSE)$acf[-1], 3) # first 6 sample acf values
par(mfrow=c(1,2))
plot(lag(soi,-1), soi); legend('topleft', legend=r[1])
plot(lag(soi,-6), soi); legend('topleft', legend=r[6])
####################
# Example 1.26 Large sample dist of ACF
set.seed(101010)
x1 = 2*rbinom(11, 1, .5) - 1 # simulated sequence of coin tosses
x2 = 2*rbinom(101, 1, .5) - 1
y1 = 5 + filter(x1, sides=1, filter=c(1,-.7))[-1]
y2 = 5 + filter(x2, sides=1, filter=c(1,-.7))[-1]
tsplot(y1, type='s')  # plot series
tsplot(y2, type='s')
c(mean(y1), mean(y2))  # the sample means
acf(y1, lag.max=4, plot=FALSE)
acf(y2, lag.max=4, plot=FALSE)
?acf1
####################
# Example 1.27 ACF of the Speech data
tsplot(speech)
dev.off()
####################
# Example 1.27 ACF of the Speech data
tsplot(speech)
acf1(speech, 250)
acf(speech, 250)
dev.off()
####################
# Example 1.28 SOI v.s. Recruitment
par(mfrow=c(3,1))
acf1(soi, 48, main="Southern Oscillation Index")
acf1(rec, 48, main="Recruitment")
ccf2(soi, rec, 48, main="SOI vs Recruitment")
dev.off()
####################
# Example 1.29
set.seed(1492)
num=120; t=1:num
X = ts(2*cos(2*pi*t/12) + rnorm(num), freq=12)
Y = ts(2*cos(2*pi*(t+5)/12) + rnorm(num), freq=12)
Yw = resid( lm(Y~ cos(2*pi*t/12) + sin(2*pi*t/12), na.action=NULL) )
par(mfrow=c(3,2), mgp=c(1.6,.6,0), mar=c(3,3,1,1) )
tsplot(X)
tsplot(Y)
acf1(X, 48, ylab='ACF(X)')
acf1(Y, 48, ylab='ACF(Y)')
ccf2(X, Y, 24)
ccf2(X, Yw, 24, ylim=c(-.6,.6))
persp(1:64, 1:36, soiltemp, phi=30, theta=30, scale=FALSE, expand=4, ticktype="detailed",
xlab="rows", ylab="cols", zlab="temperature")
dev.off()
persp(1:64, 1:36, soiltemp, phi=30, theta=30, scale=FALSE, expand=4, ticktype="detailed",
xlab="rows", ylab="cols", zlab="temperature")
dev.new()
tsplot(rowMeans(soiltemp), xlab="row", ylab="Average Temperature")
soiltemp
class(soiltemp)
dim(soiltemp)
####################
# Example 1.31
fs = abs(fft(soiltemp-mean(soiltemp)))^2/(64*36) # see Ch 4 for info on FFT
cs = Re(fft(fs, inverse=TRUE)/sqrt(64*36))  # ACovF
rs = cs/cs[1,1]                             # ACF
rs2 = cbind(rs[1:41,21:2], rs[1:41,1:21])   #  these lines are just to center
rs3 = rbind(rs2[41:2,], rs2)                #  the 0 lag
par(mar = c(1,2.5,0,0)+.1)
persp(-40:40, -20:20, rs3, phi=30, theta=30, expand=30, scale="FALSE", ticktype="detailed",
xlab="row lags", ylab="column lags", zlab="ACF")
rm(list=ls())
library(astsa)
####################
# Example 1.24 Prediction with cross-correlation
set.seed(2)
x = rnorm(100)
y = lag(x, -5) + rnorm(100)
ccf(y, x, ylab='CCovF', type='covariance')
abline(v=0, lty=2)
text(11, .9, 'x leads')
text(-9, .9, 'y leads')
dev.off()
####################
# Example 1.25 Sample ACF and Scatterplot
r = round(acf(soi, 6, plot=FALSE)$acf[-1], 3) # first 6 sample acf values
par(mfrow=c(1,2))
plot(lag(soi,-1), soi); legend('topleft', legend=r[1])
plot(lag(soi,-6), soi); legend('topleft', legend=r[6])
dev.off()
####################
# Example 1.26 Large sample dist of ACF
set.seed(101010)
x1 = 2*rbinom(11, 1, .5) - 1 # simulated sequence of coin tosses
x2 = 2*rbinom(101, 1, .5) - 1
y1 = 5 + filter(x1, sides=1, filter=c(1,-.7))[-1]
y2 = 5 + filter(x2, sides=1, filter=c(1,-.7))[-1]
tsplot(y1, type='s')  # plot series
tsplot(y2, type='s')
c(mean(y1), mean(y2))  # the sample means
acf(y1, lag.max=4, plot=FALSE)
acf(y2, lag.max=4, plot=FALSE)
acf(y1, lag.max=4, plot=FALSE)
acf(y2, lag.max=4, plot=FALSE)
dev.off()
####################
# Example 1.26 Large sample dist of ACF
set.seed(101010)
x1 = 2*rbinom(11, 1, .5) - 1 # simulated sequence of coin tosses
x2 = 2*rbinom(101, 1, .5) - 1
y1 = 5 + filter(x1, sides=1, filter=c(1,-.7))[-1]
y2 = 5 + filter(x2, sides=1, filter=c(1,-.7))[-1]
tsplot(y1, type='s')  # plot series
tsplot(y2, type='s')
c(mean(y1), mean(y2))  # the sample means
acf(y1, lag.max=4, plot=FALSE)
acf(y2, lag.max=4, plot=FALSE)
# tsplot(y1, type='s')  # plot series
# tsplot(y2, type='s')
c(mean(y1), mean(y2))  # the sample means
acf(y1, lag.max=4, plot=FALSE)
acf(y2, lag.max=4, plot=FALSE)
dev.off()
####################
# Example 1.27 ACF of the Speech data
tsplot(speech)
acf1(speech, 250)
dev.off()
####################
# Example 1.28 SOI v.s. Recruitment
par(mfrow=c(3,1))
acf1(soi, 48, main="Southern Oscillation Index")
acf1(rec, 48, main="Recruitment")
ccf2(soi, rec, 48, main="SOI vs Recruitment")
dev.off()
####################
# Example 1.30 Soil surface temperature
persp(1:64, 1:36, soiltemp, phi=30, theta=30, scale=FALSE, expand=4, ticktype="detailed",
xlab="rows", ylab="cols", zlab="temperature")
tsplot(rowMeans(soiltemp), xlab="row", ylab="Average Temperature")
dev.off()
####################
# Example 1.31
fs = abs(fft(soiltemp-mean(soiltemp)))^2/(64*36) # see Ch 4 for info on FFT
cs = Re(fft(fs, inverse=TRUE)/sqrt(64*36))  # ACovF
rs = cs/cs[1,1]                             # ACF
rs2 = cbind(rs[1:41,21:2], rs[1:41,1:21])   #  these lines are just to center
rs3 = rbind(rs2[41:2,], rs2)                #  the 0 lag
par(mar = c(1,2.5,0,0)+.1)
persp(-40:40, -20:20, rs3, phi=30, theta=30, expand=30, scale="FALSE", ticktype="detailed",
xlab="row lags", ylab="column lags", zlab="ACF")
knitr::opts_chunk$set(echo = TRUE)
library(astsa)
tsplot(jj, type="o", ylab="Quarterly Earnings per Share")
tsplot(jj, type="o", ylab="Quarterly Earnings per Share")
knitr::opts_chunk$set(echo = TRUE)
library(astsa)
knitr::opts_chunk$set(echo = TRUE)
library(astsa)
djiar = diff(log(djia$DJI.Close))[-1]         # approximate returns
library(quantmod)
getSymbols("^DJI", from="2006-04-20", to="2016-04-20", periodicity="daily")
djia = DJI
library(xts)                              # if don't use TTR
djiar = diff(log(djia$DJI.Close))[-1]         # approximate returns
plot(djiar, main="DJIA Returns", type="n")
lines(djiar)
rm(list=ls())
detach("package:xts", unload=TRUE)
