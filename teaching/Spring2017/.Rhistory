x= seq( -5,5,,1000)
obj<-Exp.cov(x)
look<- mvrnorm(5, rep(0,length(x)), obj)
plot(x,look[1,],type='l')
library(fields)
x= seq( -5,5,,1000)
obj<-Exp.cov(x)
look<- mvrnorm(5, rep(0,length(x)), obj)
plot(x,look[1,],type='l')
library(MASS)
x= seq( -5,5,,1000)
obj<-Exp.cov(x)
look<- mvrnorm(5, rep(0,length(x)), obj)
plot(x,look[1,],type='l')
lines(x,look[2,],col=2)
library(geoR)
vario.b <- variog(s100, max.dist=1)
vario.c <- variog(s100, max.dist=1, op="cloud")
vario.bc <- variog(s100, max.dist=1, bin.cloud=TRUE)
vario.s <- variog(s100, max.dist=1, op="sm", band=0.2)
par(mfrow=c(2,2))
plot(vario.b, main="binned variogram")
plot(vario.c, main="variogram cloud")
plot(vario.bc, bin.cloud=TRUE, main="clouds for binned variogram")
plot(vario.s, main="smoothed variogram")
data( ozone2)
good<- !is.na(ozone2$y[16,])
x<- ozone2$lon.lat[good,]
y<- ozone2$y[16,good]
look<-vgram( x,y, N=15, lon.lat=TRUE) # locations are in lon/lat so use right
plot(look, pch=19)
brk<- seq( 0, 250,, (25 + 1) ) # will give 25 bins.
boxplotVGram(look, breaks=brk, plot.args=list(type="o"))
plot(look, add=TRUE, breaks=brk, col=4)
dev.off()
library(fields)
library(MASS)
x= seq( -5,5,,1000)
x= seq( -5,5,,1000)
obj<-Exp.cov(x)
look<- mvrnorm(5, rep(0,length(x)), obj)
plot(x,look[1,],type='l')
lines(x,look[2,],col=2)
library(fields)
library(MASS)
#Simulate a Gaussian random field with an exponential covariance function,
#range parameter = 2.0 and the domain is  [0,5]X [0,5] evaluating the
#field at a 100X100 grid.
x= seq( -5,5,,1000)
obj<-Exp.cov(x)
look<- mvrnorm(5, rep(0,length(x)), obj)
plot(x,look[1,],type='l')
lines(x,look[2,],col=2)
?sim.rf
grid<- list( x= seq( 0,5,,100), y= seq(0,5,,100))
obj<-Exp.image.cov( grid=grid, theta=.5, setup=TRUE)
grid<- list( x= seq( 0,5,,100), y= seq(0,5,,100))
obj<-Exp.image.cov( grid=grid, theta=.5, setup=TRUE)
look<- sim.rf( obj)
look2<- sim.rf( obj)
look3<- sqrt( 10)*  sim.rf( obj)
set.panel(2,1)
image.plot( grid$x, grid$y, look)
title("simulated gaussian fields")
image.plot( grid$x, grid$y, look2)
title("another realization ...")
set.panel(1,2)
image.plot( grid$x, grid$y, look)
title("simulated gaussian fields")
image.plot( grid$x, grid$y, look2)
title("another realization ...")
dev.off()
grid<- list( x= seq( 0,5,,100), y= seq(0,5,,100))
obj<-Exp.image.cov( grid=grid, theta=.5, setup=TRUE)
class(obj)
summary(obj)
obj
grid<- list( x= seq( 0,5,,100), y= seq(0,5,,100))
obj<-Exp.image.cov( grid=grid, theta=.5, setup=TRUE)
look<- sim.rf( obj)
look2<- sim.rf( obj)
look3<- sqrt( 10)*  sim.rf( obj)
set.panel(1,2)
image.plot( grid$x, grid$y, look)
title("simulated gaussian fields")
image.plot( grid$x, grid$y, look2)
title("another realization ...")
set.panel(1,2)
image.plot( grid$x, grid$y, look)
title("simulated gaussian fields")
image.plot( grid$x, grid$y, look2)
set.panel(1,2)
image.plot( grid$x, grid$y, look)
set.panel(1,2)
image.plot( grid$x, grid$y, look)
title("simulated gaussian fields")
dev.off()
set.panel(1,2)
image.plot( grid$x, grid$y, look)
title("simulated gaussian fields")
image.plot( grid$x, grid$y, look2)
title("another realization ...")
library(fields)
?Krig
data( ozone2)
good<- !is.na(ozone2$y[16,])
x<- ozone2$lon.lat[good,]
y<- ozone2$y[16,good]
look<-vgram( x,y, N=15, lon.lat=TRUE) # locations are in lon/lat so use right
plot(look, pch=19)
brk<- seq( 0, 250,, (25 + 1) ) # will give 25 bins.
boxplotVGram(look, breaks=brk, plot.args=list(type="o"))
plot(look, add=TRUE, breaks=brk, col=4)
look<-vgram( x,y, N=15, lon.lat=TRUE, type="covariogram")
plot(look, breaks=brk, col=4)
look = crossCoVGram(x, x, y, y, N=15, lon.lat=TRUE, type="cross-covariogram")
plot(look, breaks=brk, col=4)
fit <- Krig(ChicagoO3$x, ChicagoO3$y, theta=20)
fit <- Krig(ChicagoO3$x, ChicagoO3$y, theta=20)
summary( fit) # summary of fit
set.panel( 2,2)
plot(fit) # four diagnostic plots of fit
set.panel()
surface( fit, type="C") # look at the surface
predict( fit)
predict( fit, df=7.5)
out<- predictSurface( fit)
surface( out, type="C") # option "C" our favorite
xnew<- rbind( c( 10, -10), c( 20, 15))
predict( fit, xnew)
predictSE( fit, xnew)
predictSurfaceSE( fit)-> out.p # this takes some time!
surface( out.p, type="C")
points( fit$x)
fit <- Krig(ChicagoO3$x, ChicagoO3$y, Covariance="Matern", theta=10, smoothness=1.0)
summary( fit)
test.cov <- function(x1,x2,theta,marginal=FALSE,C=NA){
# return marginal variance
if( marginal) { return(rep( 1, nrow( x1)))}
# find cross covariance matrix
temp<- exp(-(rdist(x1,x2)/theta)**2)
if( is.na(C[1])){
return( temp)}
else{
return( temp%*%C)}
}
fit.flame<- Krig(flame$x, flame$y, cov.function="test.cov", m=3, theta=.5)
surface(fit.flame, type="I")
flame
?flame
out<- Krig( ChicagoO3$x, ChicagoO3$y,cov.function="Rad.cov",
m=2,p=2,scale.type="range")
?ChicagoO3
out<- Krig( ChicagoO3$x, ChicagoO3$y,cov.function="Rad.cov",
m=2,p=2,scale.type="range")
data(ozone2)
y16<- ozone2$y[16,]
good<- !is.na( y16)
y<- y16[good]
x<- ozone2$lon.lat[ good,]
xknots<- cover.design( x, 50, num.nn= 75)$design  # select 50 knot points
out<- Krig( x, y, knots=xknots,  cov.function="Exp.cov", theta=300)
summary( out)
surface( out, type="C")
US( add=TRUE)
?ozone2
summary( out)
surface( out, type="C")
US( add=TRUE)
points( x, col=2)
points( xknots, cex=2, pch="O")
RM.approx<- as.image(RMprecip$y, x=RMprecip$x, nx=20, ny=20)
image.plot( RM.approx)
yd<- RM.approx$z[RM.approx$ind]
weights<- RM.approx$weights[RM.approx$ind] # takes into account averaging
xd<- RM.approx$xd
obj<- Krig( xd, yd, weights=weights, theta=4)
data(ozone2)
stats.o3<- stats( ozone2$y)
mean.o3<- Tps( ozone2$lon.lat, c( stats.o3[2,]))
sd.o3<- Tps(  ozone2$lon.lat, c( stats.o3[3,]))
fit<- Krig( ozone2$lon.lat, ozone2$y[16,],
theta=350, mean.obj=mean.o3, sd.obj=sd.o3,
Covariance="Matern", Distance="rdist.earth",
smoothness=1.0,
na.rm=TRUE) #
surface( fit, type="I")
US( add=TRUE)
points( fit$x)
title("Estimated ozone surface")
# explore some different values for the range and lambda using REML
theta <- seq( 100,500,,40)
PLL<- matrix( NA, 40,80)
# the loop
for( k in 1:40){
# call to Krig with different ranges
# also turn off warnings for GCV search
# to avoid lots of messages. (not recommended in general!)
PLL[k,]<- Krig( ozone2$lon.lat,ozone2$y[16,],
cov.function="stationary.cov",
theta=theta[k], mean.obj=mean.o3, sd.obj=sd.o3,
Covariance="Matern",smoothness=.5,
Distance="rdist.earth", nstep.cv=80,
give.warnings=FALSE, na.rm=TRUE)$gcv.grid[,7]
#
# gcv.grid is the grid search output from
# the optimization for estimating different estimates for lambda including
# REML
# default grid is equally spaced in eff.df scale ( and should the same across theta)
#  here
}
# get lambda grid  from looping
k<- 1
lam<-  Krig( ozone2$lon.lat,ozone2$y[16,],
cov.function="stationary.cov",
theta=theta[k], mean.obj=mean.o3, sd.obj=sd.o3,
Covariance="Matern",smoothness=.5,
Distance="rdist.earth", nstep.cv=80,
give.warnings=FALSE, na.rm=TRUE)$gcv.grid[,1]
# see the 2 column of $gcv.grid to get the effective degress of freedom.
contour( theta,log(lam) , PLL)
fit <- Krig(ChicagoO3$x, ChicagoO3$y, theta=20)
summary( fit) # summary of fit
set.panel( 2,2)
plot(fit) # four diagnostic plots of fit
?Krig
?plot.Krig
dev.off()
fit <- Krig(ChicagoO3$x, ChicagoO3$y, theta=20)
summary( fit) # summary of fit
set.panel( 2,2)
plot(fit) # four diagnostic plots of fit
set.panel()
surface( fit, type="C") # look at the surface
predict( fit)
?predict.Krig
?Krig.df.to.lambda
?Krig
predict( fit, df=7.5)
out<- predictSurface( fit)
surface( out, type="C") # option "C" our favorite
dev.off()
out<- predictSurface( fit)
surface( out, type="C") # option "C" our favorite
xnew<- rbind( c( 10, -10), c( 20, 15))
predict( fit, xnew)
predictSE( fit, xnew)
predictSurfaceSE( fit)-> out.p # this takes some time!
surface( out.p, type="C")
points( fit$x)
fit <- Krig(ChicagoO3$x, ChicagoO3$y, Covariance="Matern", theta=10, smoothness=1.0)
summary( fit)
library(fields)
data=read.table('data1.txt',header=T)
nlon=length(unique(data[,1]))
nlat=length(unique(data[,2]))
loc=data[,1:2]
y=data[,3]
varigram=vgram(loc, y, lon.lat=TRUE,N=15)
par(mfrow=c(1,2))
plot(varigram$d,2*varigram$vgram,xlab="distance",ylab="varigram",main="Variogram cloud")
lines(varigram$centers, varigram$stats["mean",], col=4,lwd=3)
lines(varigram$centers, sqrt(2*varigram$stats["mean",]), col=4,lwd=3)
bplot.xy(varigram$d, sqrt(2*varigram$vgram),ylab="sqrt(VG)", N=15, outlier=TRUE, main="Boxplots of variogram")
library(geoR)
data2=as.list(data)
var4=variog4(coords =loc,data =y)
graphics.off()
plot(var4,lwd=3)
library(fields)
data( ozone2)
good<- !is.na(ozone2$y[16,])
x<- ozone2$lon.lat[good,]
y<- ozone2$y[16,good]
look<-vgram( x,y, N=15, lon.lat=TRUE) # locations are in lon/lat so use right
plot(look, pch=19)
brk<- seq( 0, 250,, (25 + 1) ) # will give 25 bins.
boxplotVGram(look, breaks=brk, plot.args=list(type="o"))
plot(look, add=TRUE, breaks=brk, col=4)
fit <- Krig(ChicagoO3$x, ChicagoO3$y, theta=20)
?ChicagoO3
ChicagoO3$x
head(ChicagoO3$x)
dim(ChicagoO3$x)
dim(ChicagoO3$y)
ChicagoO3$y
fit <- Krig(ChicagoO3$x, ChicagoO3$y, theta=20)
summary( fit) # summary of fit
set.panel( 2,2)
plot(fit) # four diagnostic plots of fit
set.panel()
surface( fit, type="C") # look at the surface
set.panel( 2,2)
plot(fit) # four diagnostic plots of fit
set.panel()
surface( fit, type="C") # look at the surface
summary( fit) # summary of fit
set.panel( 2,2)
plot(fit) # four diagnostic plots of fit
summary( fit) # summary of fit
set.panel( 2,2)
plot(fit) # four diagnostic plots of fit
set.panel()
surface( fit, type="C") # look at the surface
dev.off()
summary( fit) # summary of fit
set.panel( 2,2)
plot(fit) # four diagnostic plots of fit
set.panel()
surface( fit, type="C") # look at the surface
?Krig
dev.off()
library(fields)
data( ozone2)
?ozone2
good<- !is.na(ozone2$y[16,])
x<- ozone2$lon.lat[good,]
y<- ozone2$y[16,good]
look<-vgram( x,y, N=15, lon.lat=TRUE) # locations are in lon/lat so use right
plot(look, pch=19)
plot(look, pch=19)
brk<- seq( 0, 250,, (25 + 1) ) # will give 25 bins.
boxplotVGram(look, breaks=brk, plot.args=list(type="o"))
plot(look, add=TRUE, breaks=brk, col=4)
library(geoR)
?s100
head(s100)
vario.b <- variog(s100, max.dist=1)
vario.c <- variog(s100, max.dist=1, op="cloud")
vario.bc <- variog(s100, max.dist=1, bin.cloud=TRUE)
vario.s <- variog(s100, max.dist=1, op="sm", band=0.2)
par(mfrow=c(2,2))
plot(vario.b, main="binned variogram")
plot(vario.c, main="variogram cloud")
plot(vario.bc, bin.cloud=TRUE, main="clouds for binned variogram")
plot(vario.s, main="smoothed variogram")
dev.off()
?vargio4
?variog4
var4 <- variog4(s100, max.dist=1)
plot(var4)
var4 <- variog4(s100, max.dist=1)
plot(var4)
library(fields)
data=read.table('data1.txt',header=T)
nlon=length(unique(data[,1]))
nlat=length(unique(data[,2]))
loc=data[,1:2]
y=data[,3]
varigram=vgram(loc, y, lon.lat=TRUE,N=15)
par(mfrow=c(1,2))
plot(varigram$d,2*varigram$vgram,xlab="distance",ylab="varigram",main="Variogram cloud")
lines(varigram$centers, varigram$stats["mean",], col=4,lwd=3)
bplot.xy(varigram$d, sqrt(2*varigram$vgram),ylab="sqrt(VG)", N=15, outlier=TRUE, main="Boxplots of variogram")
lines(varigram$centers, sqrt(2*varigram$stats["mean",]), col=4,lwd=3)
graphics.off()
data1=data[101:150,]
data2=data[201:250,]
data3=data[301:350,]
data4=data[401:450,]
vgram_lat1=vgram(data1[,1:2], data1[,3], lon.lat=TRUE, N=10)
vgram_lat2=vgram(data2[,1:2], data2[,3], lon.lat=TRUE, N=10)
vgram_lat3=vgram(data3[,1:2], data3[,3], lon.lat=TRUE, N=10)
vgram_lat4=vgram(data4[,1:2], data4[,3], lon.lat=TRUE, N=10)
par(mfrow=c(2,2))
bplot.xy(vgram_lat1$d, sqrt(2*vgram_lat1$vgram),ylab="sqrt(VG)", N=10, outlier=TRUE, main="latitude -49.72")
lines(vgram_lat1$centers, sqrt(2*vgram_lat1$stats["mean",]), col=4, lwd=3)
bplot.xy(vgram_lat2$d, sqrt(2*vgram_lat2$vgram),ylab="sqrt(VG)", N=10, outlier=TRUE, main="latitude -9.94")
lines(vgram_lat2$centers, sqrt(2*vgram_lat2$stats["mean",]), col=4, lwd=3)
bplot.xy(vgram_lat3$d, sqrt(2*vgram_lat3$vgram),ylab="sqrt(VG)", N=10, outlier=TRUE, main="latitude 29.83")
lines(vgram_lat3$centers, sqrt(2*vgram_lat3$stats["mean",]), col=4, lwd=3)
bplot.xy(vgram_lat4$d, sqrt(2*vgram_lat4$vgram),ylab="sqrt(VG)", N=10, outlier=TRUE, main="latitude 69.61")
lines(vgram_lat4$centers, sqrt(2*vgram_lat4$stats["mean",]), col=4, lwd=3)
dev.off()
?Krig
fit <- Krig(ChicagoO3$x, ChicagoO3$y, theta=20)
summary( fit) # summary of fit
set.panel( 2,2)
plot(fit) # four diagnostic plots of fit
dev.off()
set.panel( 2,2)
plot(fit) # four diagnostic plots of fit
set.panel()
surface( fit, type="C") # look at the surface
predict( fit)
xnew<- rbind( c( 10, -10), c( 20, 15))
predict( fit, xnew)
predictSE( fit, xnew)
predictSurfaceSE( fit)-> out.p # this takes some time!
surface( out.p, type="C")
points( fit$x)
